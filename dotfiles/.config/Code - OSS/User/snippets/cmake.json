{
	"Default C++ project": {
		"prefix": "default",
		"body": [
			"PROJECT(",
			"\t\"${2:project_name}\"",
			"\tDESCRIPTION \"${3:project_desc}\"",
			"\tVERSION 0.0.1",
			"\tLANGUAGES CXX",
			")",
			"",
			"\t##############################",
			"\t# C++ Standard Configuration #",
			"\t##############################",
			"",
			"SET(CMAKE_CXX_STANDARD          ${0}11)",
			"SET(CMAKE_CXX_STANDARD_REQUIRED ON)",
			"SET(CMAKE_CXX_EXTENSIONS        OFF)",
			"",
			"\t#####################",
			"\t# Project Variables #",
			"\t#####################",
			"",
			"SET(${1:project_prefix}_EXECUTABLE_NAME      ${4:project_exec})",
			"SET($1_TEST_EXECUTABLE_NAME $4_test)",
			"",
			"SET($1_BASE_DIR    \\${CMAKE_CURRENT_SOURCE_DIR})",
			"SET($1_SOURCE_DIR  ${$1_BASE_DIR}/src)",
			"SET($1_INCLUDE_DIR ${$1_BASE_DIR}/include)",
			"SET($1_LIB_DIR     ${$1_BASE_DIR}/libs)",
			"SET($1_TEST_DIR    ${$1_BASE_DIR}/tests)",
			"SET($1_BIN_DIR     \\${CMAKE_CURRENT_BINARY_DIR})",
			"",
			"\t###################",
			"\t# Project Options #",
			"\t###################",
			"",
			"OPTION($1_VERBOSE \"Enable verbose output\"                     OFF)",
			"OPTION($1_DEBUG   \"Enable debug build (runtime assertion)\"    OFF)",
			"OPTION($1_DOC     \"Enable documentation generation (Doxygen)\" OFF)",
			"OPTION($1_TEST    \"Enable test build and run\"                 OFF)",
			"",
			"\t########################",
			"\t# Project Dependencies #",
			"\t########################",
			"",
			"# Find and add XXX library",
			"# FIND_PACKAGE(",
			"# \tXXX",
			"# \tCOMPONENTS XXX XXX XXX",
			"# \tREQUIRED",
			"# )",
			"",
			"\t#######################",
			"\t# CMake Configuration #",
			"\t#######################",
			"",
			"# If no build type is specified (and we're not using a multi-config generator), default to Debug",
			"IF (NOT CMAKE_BUILD_TYPE AND NOT GENERATOR_IS_MULTI_CONFIG)",
			"\tMESSAGE(STATUS \"No build type selected, default to Debug\")",
			"\tSET(CMAKE_BUILD_TYPE \"Debug\")",
			"ENDIF()",
			"",
			"\t#########################",
			"\t# Project Configuration #",
			"\t#########################",
			"",
			"# Create target and add sources",
			"ADD_EXECUTABLE(${$1_EXECUTABLE_NAME})",
			"FILE(GLOB_RECURSE $1_SOURCES CONFIGURE_DEPENDS \"${$1_SOURCE_DIR}/*.cpp\")",
			"TARGET_SOURCES(${$1_EXECUTABLE_NAME} PRIVATE ${$1_SOURCES})",
			"",
			"# Add include directories to the include path",
			"TARGET_INCLUDE_DIRECTORIES(${$1_EXECUTABLE_NAME} PRIVATE ${$1_INCLUDE_DIR})",
			"",
			"# Add configuration file and add it to the include path",
			"# CONFIGURE_FILE(${$1_INCLUDE_DIR}/version.h.in version.h)",
			"# TARGET_INCLUDE_DIRECTORIES(${$1_EXECUTABLE_NAME} PRIVATE ${$1_BIN_DIR})",
			"",
			"# Conditionally add definition based on CMake options",
			"TARGET_COMPILE_DEFINITIONS(${$1_EXECUTABLE_NAME} PRIVATE $<$<BOOL:${$1_VERBOSE}>:$1_VERBOSE>)",
			"TARGET_COMPILE_DEFINITIONS(${$1_EXECUTABLE_NAME} PRIVATE $<$<BOOL:${$1_DEBUG}>:$1_DEBUG>)",
			"",
			"# Add compiler flags based on the configuration",
			"IF (CMAKE_BUILD_TYPE MATCHES Release)",
			"\tTARGET_COMPILE_OPTIONS(${$1_EXECUTABLE_NAME} PRIVATE",
			"\t\t\"$<$<COMPILE_LANG_AND_ID:CXX,AppleClang,Clang,GNU>:$<BUILD_INTERFACE:-O3;-w>>\"",
			"\t\t\"$<$<COMPILE_LANG_AND_ID:CXX,MSVC>:$<BUILD_INTERFACE:-O2;-GL;-w>>\"",
			"\t)",
			"ELSE()",
			"\tTARGET_COMPILE_OPTIONS(${$1_EXECUTABLE_NAME} PRIVATE",
			"\t\t\"$<$<COMPILE_LANG_AND_ID:CXX,AppleClang,Clang,GNU>:$<BUILD_INTERFACE:-g;-Og;-save-temps;-Wall;-Wextra;-pedantic;-Werror;-Wconversion;-Wsign-conversion;-Wundef>>\"",
			"\t\t\"$<$<COMPILE_LANG_AND_ID:CXX,MSVC>:$<BUILD_INTERFACE:-Od;-Zi;-W4;-WX>>\"",
			"\t)",
			"ENDIF()",
			"",
			"# TARGET_LINK_LIBRARIES(",
			"# \t${$1_EXECUTABLE_NAME}",
			"# \tXXX XXXX",
			"# )",
			"",
			"\t####################################",
			"\t# Doxygen Documentation Generation #",
			"\t####################################",
			"",
			"IF (GC_DOC)",
			"\tMESSAGE(STATUS \"Generation of documentation enabled\")",
			"",
			"\t# Try to find Doxygen executable",
			"\tFIND_PACKAGE(Doxygen)",
			"",
			"\t# If the executable was found...",
			"\tIF (DOXYGEN_FOUND)",
			"",
			"\t\t# ... Generate Doxyfile (To update project name, version, description, path, ...)",
			"\t\tCONFIGURE_FILE(${$1_BASE_DIR}/Doxyfile.in ${$1_BIN_DIR}/Doxyfile @ONLY)",
			"",
			"\t\t# ... generate documentation",
			"\t\tADD_CUSTOM_COMMAND(",
			"\t\t\tTARGET ${$1_EXECUTABLE_NAME} POST_BUILD",
			"\t\t\tCOMMAND $<TARGET_FILE:Doxygen::doxygen> -q ${$1_BIN_DIR}/Doxyfile",
			"\t\t\tWORKING_DIRECTORY ${$1_SOURCE_DIR}",
			"\t\t\tCOMMENT \"Generating Doxygen documentation at ${$1_BIN_DIR}/doc\"",
			"\t\t)",
			"\tELSE()",
			"\t\tMESSAGE(WARNING \"Documentation generation is activated but Doxygen executable couldn't be found\")",
			"\tENDIF()",
			"ENDIF()",
			"",
			"\t#################################",
			"\t# Test Generation And Execution #",
			"\t#################################",
			"",
			"IF (GC_TEST)",
			"\tMESSAGE(STATUS \"Building of tests enabled\")",
			"",
			"\tFETCHCONTENT_DECLARE(",
			"\t\tgoogletest",
			"\t\tGIT_REPOSITORY https://github.com/google/googletest.git",
			"\t\tGIT_TAG        b796f7d44681514f58a683a3a71ff17c94edb0c1 # v1.13.0",
			"\t\tGIT_SHALLOW    ON",
			"\t)",
			"\tFETCHCONTENT_MAKEAVAILABLE(googletest)",
			"",
			"\t# Enable generation of tests (using GoogleTest, without using CTest directly)",
			"\tENABLE_TESTING()",
			"\t# Include GoogleTest CMake macros",
			"\tINCLUDE(GoogleTest)",
			"",
			"\t# Test sources",
			"\tFILE(GLOB_RECURSE $1_TEST_SOURCES CONFIGURE_DEPENDS \"${$1_TEST_DIR}/*.cpp\")",
			"\t# Test executable",
			"\tADD_EXECUTABLE(${$1_TEST_EXECUTABLE_NAME} ${$1_TEST_SOURCES})",
			"",
			"\t# Link test executable to GoogleTest libraries",
			"\tTARGET_LINK_LIBRARIES(",
			"\t\t${$1_TEST_EXECUTABLE_NAME}",
			"\t\tgtest gmock gtest_main",
			"\t)",
			"",
			"\t# No matter what, tests should always be verbose and enable debug mode.",
			"\t# The 'GC_DEBUG' macro enable runtime assertions, which triggers crashes in some cases,",
			"\t# and some tests check for these crashes. In production mode, these assertions are disabled",
			"\t# to improve performances, and thus production code should never trigger this crashes.",
			"\tTARGET_COMPILE_DEFINITIONS(${$1_TEST_EXECUTABLE_NAME} PRIVATE $1_VERBOSE $1_DEBUG)",
			"",
			"\t# Macro added by GoogleTest to automatically add the tests inside the given executable to the test list",
			"\tGTEST_DISCOVER_TESTS(${$1_TEST_EXECUTABLE_NAME})",
			"ENDIF()"
		],
	}
}